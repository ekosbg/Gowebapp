/*
	Go Web
	Go Provides a viable alternative to existing languages and platforms
	for developing large-scale web applications.
	Large-scale web applications typically need to be:
	Scallable
	Modular
	Maintainable
	Highh-Performance
*/
/*
	Scalable
	Quickly and easily increase the capacity of the application to take
	on bigger volume of requests. 
	The application should scale also linearly, meaning you should be able
	to add more hardware and process a corresponding numbers of requests.
	Vertical Scaling, increasing the amount of CPU's or capacity in a single machine.
	Horizontal Scaling, increasing the number of machine to expand capacity
*/
/*
	Go scale well vertically with its excellent support for concurrent
	programming. A single Go web application with a single OS thread can be
	scheduled to run hundreds of thousands of groutines with efficiency and 
	performance.
*/
/*
	Just like any other web applications, Go can scale well horizontally
	as well as by layering a proxy above a number of instances of a Go web app.
	Go web applicaitons are compiled as static binaries, without any
	dynamic dependencies, and can be distributed to system that don't have
	Go built in. This allows you to deploy Go web applications easily and 
	consistenly.
*/
/*
Modular
Go is also often used to create microservices. In microservice architecture large-scale
applications can be created by composing smaller independent services. These services
are interchangeable and organized around capabilities (for example, a systems-level
service like logging or an application-level service such as billing or risk analysis). By
creating multiple small Go services and composing them into a single web application,
you enable these capabilities to be swappable and therefore more modular.
*/

/*
Maintanable
Like any large and complex applications, having an easily maintainable codebase is
important for large-scale web applications. It’s important because large-scale applica-
tions often need to grow and evolve and therefore you need to revisit and change the
code regularly. Complex, unwieldy code takes a long time to change and is fraught
with risk of something breaking, so it makes sense to keep the source code well orga-
nized and maintainable.

Go’s package system is flexible and unambiguous, and there’s a good set of tools 
to enhance the development experience and help
programmers to write more readable code. An example is the Go source code format-
ter (gofmt) which standardizes the formatting of Go code.
Go expects documentation to evolve along with the code. The Go documentation
tool (godoc) parses Go source code, including comments, and creates documentation
in a variety of formats such as HTML and plain text. It’s very easy to use—just write the
documentation above the source code itself and godoc will extract it along with the
code to generate the documentation.

Testing is built into Go. gotest discovers test cases built into the same package and
runs functional and performance testing. Go also provides web application testing
tools by emulating a web client and recording responses generated by the server.
*/
/*
High performing web applications
High performance
means beign able to process a large volume of requests within a short period of time.
It also means being able to respond to the client quickly and making operations faster for end users.

Go compiles to native code, which generally means it’s faster than other interpreted languages and
frameworks. As described earlier, Go also has great concurrency support with gorou-
tines, which allows multiple requests to be processed at the same time.
*/